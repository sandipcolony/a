a.
import random

word_list = ["python", "hangman", "challenge", "programming", "random", "game"]

# Function to display the current state of the word
def display_word(word, guessed_letters):
    display = ""
    for letter in word:
        if letter in guessed_letters:
            display += letter
        else:
            display += "_ "
    return display

def hangman():
    word = random.choice(word_list)
    guessed_letters = set()
    wrong_attempts = 0
    max_attempts = 6

    print("Welcome to Hangman!")
    print("Guess the word by entering one letter at a time.")
    print("You have", max_attempts, "wrong attempts allowed.")

    while wrong_attempts < max_attempts:
        current_state = display_word(word, guessed_letters)
        print("\nWord:", current_state)board=["-" for x in range(9)]
def print_board():
    row1="|{}|{}|{}|".format(board[0],board[1],board[2])
    row2="|{}|{}|{}|".format(board[3],board[4],board[5])
    row3="|{}|{}|{}|".format(board[6],board[7],board[8])
    print()
    print(row1)
    print(row2)
    print(row3)
    print()
def player_move(icon):
    if icon=="x":
        number=1
    elif icon=="o":
        number=2
    print("your turn player{}".format(number))
    choice=int(input("enter your move from 1-9").strip())
    if board[choice-1]=="-":
        board[choice-1]=icon
    else:
        print()
        print("this place is taken")
def is_victory(icon):
    if(board[0]==icon and board[1]==icon and board[2]==icon)or\
      (board[3]==icon and board[4]==icon and board[5]==icon)or\
      (board[6]==icon and board[7]==icon and board[8]==icon)or\
      (board[0]==icon and board[3]==icon and board[6]==icon)or\
      (board[1]==icon and board[4]==icon and board[7]==icon)or\
      (board[2]==icon and board[5]==icon and board[8]==icon)or\
      (board[0]==icon and board[4]==icon and board[8]==icon)or\
      (board[2]==icon and board[4]==icon and board[6]==icon):
        return True
    else:
        return False
def is_draw():
    if "-" not in board:
        return True
    else:
        return False
while True:
    print_board()
    player_move("x")
    print_board()
    if is_victory("x"):
        print("x win cong")
        break
    elif is_draw():
        print("its draw")
        break
    player_move("o")
    if is_victory("o"):
        print_board()
        print("o wins cong")
        break
    print("good game")
                

        
        # Check if player has won
        if "_" not in current_state:
            print("GG! You've guessed the right word:", word)
            return
        
        guess = input("Enter a letter: ").lower()
        
        # Validate input
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a single alphabet.")
            continue

        # Check if letter was already guessed
        if guess in guessed_letters:
            print("You already guessed that letter!")
            continue

        # Process guess
        guessed_letters.add(guess)
        if guess in word:
            print("Good guess!")
        else:
            wrong_attempts += 1
            print("Wrong guess. Attempts left:", max_attempts - wrong_attempts)

    print("\nGame Over! The word was:", word)

hangman()
b.
